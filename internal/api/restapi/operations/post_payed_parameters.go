// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostPayedMaxParseMemory sets the maximum size in bytes for
// the multipart form parser for this operation.
//
// The default value is 32 MB.
// The multipart parser stores up to this + 10MB.
var PostPayedMaxParseMemory int64 = 32 << 20

// NewPostPayedParams creates a new PostPayedParams object
//
// There are no default values defined in the spec.
func NewPostPayedParams() PostPayedParams {

	return PostPayedParams{}
}

// PostPayedParams contains all the bound params for the post payed operation
// typically these are obtained from a http.Request
//
// swagger:parameters PostPayed
type PostPayedParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: formData
	*/
	AMOUNT *int64
	/*
	  In: formData
	*/
	CURID *int64
	/*
	  In: formData
	*/
	MERCHANTID *int64
	/*
	  In: formData
	*/
	MERCHANTORDERID *string
	/*
	  In: formData
	*/
	PEMAIL *string
	/*
	  In: formData
	*/
	PPHONE *string
	/*
	  In: formData
	*/
	SIGN *string
	/*
	  In: formData
	*/
	Intid *int64
	/*
	  In: formData
	*/
	PayerAccount *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostPayedParams() beforehand.
func (o *PostPayedParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(PostPayedMaxParseMemory); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	fdAMOUNT, fdhkAMOUNT, _ := fds.GetOK("AMOUNT")
	if err := o.bindAMOUNT(fdAMOUNT, fdhkAMOUNT, route.Formats); err != nil {
		res = append(res, err)
	}

	fdCURID, fdhkCURID, _ := fds.GetOK("CUR_ID")
	if err := o.bindCURID(fdCURID, fdhkCURID, route.Formats); err != nil {
		res = append(res, err)
	}

	fdMERCHANTID, fdhkMERCHANTID, _ := fds.GetOK("MERCHANT_ID")
	if err := o.bindMERCHANTID(fdMERCHANTID, fdhkMERCHANTID, route.Formats); err != nil {
		res = append(res, err)
	}

	fdMERCHANTORDERID, fdhkMERCHANTORDERID, _ := fds.GetOK("MERCHANT_ORDER_ID")
	if err := o.bindMERCHANTORDERID(fdMERCHANTORDERID, fdhkMERCHANTORDERID, route.Formats); err != nil {
		res = append(res, err)
	}

	fdPEMAIL, fdhkPEMAIL, _ := fds.GetOK("P_EMAIL")
	if err := o.bindPEMAIL(fdPEMAIL, fdhkPEMAIL, route.Formats); err != nil {
		res = append(res, err)
	}

	fdPPHONE, fdhkPPHONE, _ := fds.GetOK("P_PHONE")
	if err := o.bindPPHONE(fdPPHONE, fdhkPPHONE, route.Formats); err != nil {
		res = append(res, err)
	}

	fdSIGN, fdhkSIGN, _ := fds.GetOK("SIGN")
	if err := o.bindSIGN(fdSIGN, fdhkSIGN, route.Formats); err != nil {
		res = append(res, err)
	}

	fdIntid, fdhkIntid, _ := fds.GetOK("intid")
	if err := o.bindIntid(fdIntid, fdhkIntid, route.Formats); err != nil {
		res = append(res, err)
	}

	fdPayerAccount, fdhkPayerAccount, _ := fds.GetOK("payer_account")
	if err := o.bindPayerAccount(fdPayerAccount, fdhkPayerAccount, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAMOUNT binds and validates parameter AMOUNT from formData.
func (o *PostPayedParams) bindAMOUNT(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("AMOUNT", "formData", "int64", raw)
	}
	o.AMOUNT = &value

	return nil
}

// bindCURID binds and validates parameter CURID from formData.
func (o *PostPayedParams) bindCURID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("CUR_ID", "formData", "int64", raw)
	}
	o.CURID = &value

	return nil
}

// bindMERCHANTID binds and validates parameter MERCHANTID from formData.
func (o *PostPayedParams) bindMERCHANTID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("MERCHANT_ID", "formData", "int64", raw)
	}
	o.MERCHANTID = &value

	return nil
}

// bindMERCHANTORDERID binds and validates parameter MERCHANTORDERID from formData.
func (o *PostPayedParams) bindMERCHANTORDERID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.MERCHANTORDERID = &raw

	return nil
}

// bindPEMAIL binds and validates parameter PEMAIL from formData.
func (o *PostPayedParams) bindPEMAIL(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.PEMAIL = &raw

	return nil
}

// bindPPHONE binds and validates parameter PPHONE from formData.
func (o *PostPayedParams) bindPPHONE(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.PPHONE = &raw

	return nil
}

// bindSIGN binds and validates parameter SIGN from formData.
func (o *PostPayedParams) bindSIGN(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.SIGN = &raw

	return nil
}

// bindIntid binds and validates parameter Intid from formData.
func (o *PostPayedParams) bindIntid(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("intid", "formData", "int64", raw)
	}
	o.Intid = &value

	return nil
}

// bindPayerAccount binds and validates parameter PayerAccount from formData.
func (o *PostPayedParams) bindPayerAccount(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.PayerAccount = &raw

	return nil
}
