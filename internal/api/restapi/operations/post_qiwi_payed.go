// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostQiwiPayedHandlerFunc turns a function with the right signature into a post qiwi payed handler
type PostQiwiPayedHandlerFunc func(PostQiwiPayedParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostQiwiPayedHandlerFunc) Handle(params PostQiwiPayedParams) middleware.Responder {
	return fn(params)
}

// PostQiwiPayedHandler interface for that can handle valid post qiwi payed params
type PostQiwiPayedHandler interface {
	Handle(PostQiwiPayedParams) middleware.Responder
}

// NewPostQiwiPayed creates a new http.Handler for the post qiwi payed operation
func NewPostQiwiPayed(ctx *middleware.Context, handler PostQiwiPayedHandler) *PostQiwiPayed {
	return &PostQiwiPayed{Context: ctx, Handler: handler}
}

/* PostQiwiPayed swagger:route POST /qiwi-payed postQiwiPayed

PostQiwiPayed post qiwi payed API

*/
type PostQiwiPayed struct {
	Context *middleware.Context
	Handler PostQiwiPayedHandler
}

func (o *PostQiwiPayed) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostQiwiPayedParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
