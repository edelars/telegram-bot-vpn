// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QiwiPayOpts qiwi pay opts
//
// swagger:model QiwiPayOpts
type QiwiPayOpts struct {

	// bill
	Bill *QiwiPayOptsBill `json:"bill,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this qiwi pay opts
func (m *QiwiPayOpts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBill(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QiwiPayOpts) validateBill(formats strfmt.Registry) error {
	if swag.IsZero(m.Bill) { // not required
		return nil
	}

	if m.Bill != nil {
		if err := m.Bill.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bill")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bill")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this qiwi pay opts based on the context it is used
func (m *QiwiPayOpts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBill(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QiwiPayOpts) contextValidateBill(ctx context.Context, formats strfmt.Registry) error {

	if m.Bill != nil {
		if err := m.Bill.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bill")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bill")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QiwiPayOpts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QiwiPayOpts) UnmarshalBinary(b []byte) error {
	var res QiwiPayOpts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// QiwiPayOptsBill qiwi pay opts bill
//
// swagger:model QiwiPayOptsBill
type QiwiPayOptsBill struct {

	// amount
	Amount *QiwiPayOptsBillAmount `json:"amount,omitempty"`

	// bill Id
	// Required: true
	BillID *string `json:"billId"`

	// creation date time
	CreationDateTime string `json:"creationDateTime,omitempty"`

	// expiration date time
	ExpirationDateTime string `json:"expirationDateTime,omitempty"`

	// site Id
	SiteID string `json:"siteId,omitempty"`

	// status
	Status *QiwiPayOptsBillStatus `json:"status,omitempty"`
}

// Validate validates this qiwi pay opts bill
func (m *QiwiPayOptsBill) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QiwiPayOptsBill) validateAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.Amount) { // not required
		return nil
	}

	if m.Amount != nil {
		if err := m.Amount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bill" + "." + "amount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bill" + "." + "amount")
			}
			return err
		}
	}

	return nil
}

func (m *QiwiPayOptsBill) validateBillID(formats strfmt.Registry) error {

	if err := validate.Required("bill"+"."+"billId", "body", m.BillID); err != nil {
		return err
	}

	return nil
}

func (m *QiwiPayOptsBill) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bill" + "." + "status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bill" + "." + "status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this qiwi pay opts bill based on the context it is used
func (m *QiwiPayOptsBill) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QiwiPayOptsBill) contextValidateAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.Amount != nil {
		if err := m.Amount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bill" + "." + "amount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bill" + "." + "amount")
			}
			return err
		}
	}

	return nil
}

func (m *QiwiPayOptsBill) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bill" + "." + "status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bill" + "." + "status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QiwiPayOptsBill) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QiwiPayOptsBill) UnmarshalBinary(b []byte) error {
	var res QiwiPayOptsBill
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// QiwiPayOptsBillAmount qiwi pay opts bill amount
//
// swagger:model QiwiPayOptsBillAmount
type QiwiPayOptsBillAmount struct {

	// currency
	Currency string `json:"currency,omitempty"`

	// value
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this qiwi pay opts bill amount
func (m *QiwiPayOptsBillAmount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QiwiPayOptsBillAmount) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("bill"+"."+"amount"+"."+"value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this qiwi pay opts bill amount based on context it is used
func (m *QiwiPayOptsBillAmount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *QiwiPayOptsBillAmount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QiwiPayOptsBillAmount) UnmarshalBinary(b []byte) error {
	var res QiwiPayOptsBillAmount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// QiwiPayOptsBillStatus qiwi pay opts bill status
//
// swagger:model QiwiPayOptsBillStatus
type QiwiPayOptsBillStatus struct {

	// datetime
	Datetime string `json:"datetime,omitempty"`

	// value
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this qiwi pay opts bill status
func (m *QiwiPayOptsBillStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QiwiPayOptsBillStatus) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("bill"+"."+"status"+"."+"value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this qiwi pay opts bill status based on context it is used
func (m *QiwiPayOptsBillStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *QiwiPayOptsBillStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QiwiPayOptsBillStatus) UnmarshalBinary(b []byte) error {
	var res QiwiPayOptsBillStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
